(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 37);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 1 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(3);
var createDesc = __webpack_require__(11);
module.exports = __webpack_require__(4) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(9);
var IE8_DOM_DEFINE = __webpack_require__(29);
var toPrimitive = __webpack_require__(16);
var dP = Object.defineProperty;

exports.f = __webpack_require__(4) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(10)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(51);
var defined = __webpack_require__(14);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(20)('wks');
var uid = __webpack_require__(12);
var Symbol = __webpack_require__(0).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.3' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(7);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(33);
var enumBugKeys = __webpack_require__(21);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(20)('keys');
var uid = __webpack_require__(12);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(0);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(3).f;
var has = __webpack_require__(1);
var TAG = __webpack_require__(6)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(6);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(0);
var core = __webpack_require__(8);
var LIBRARY = __webpack_require__(15);
var wksExt = __webpack_require__(23);
var defineProperty = __webpack_require__(3).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _webRTCTest = __webpack_require__(40);

var _webRTCTest2 = _interopRequireDefault(_webRTCTest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    name: 'test',
    data: function data() {
        return {};
    },

    props: {},
    methods: {
        getSupport: function getSupport(data) {
            this.$emit('getSupport', data);
        }
    },
    created: function created() {
        (0, _webRTCTest2.default)(this.getSupport);
    }
}; //
//
//

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(15);
var $export = __webpack_require__(28);
var redefine = __webpack_require__(31);
var hide = __webpack_require__(2);
var has = __webpack_require__(1);
var Iterators = __webpack_require__(17);
var $iterCreate = __webpack_require__(49);
var setToStringTag = __webpack_require__(22);
var getPrototypeOf = __webpack_require__(56);
var ITERATOR = __webpack_require__(6)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = (!BUGGY && $native) || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(0);
var core = __webpack_require__(8);
var ctx = __webpack_require__(47);
var hide = __webpack_require__(2);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(4) && !__webpack_require__(10)(function () {
  return Object.defineProperty(__webpack_require__(30)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
var document = __webpack_require__(0).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(9);
var dPs = __webpack_require__(50);
var enumBugKeys = __webpack_require__(21);
var IE_PROTO = __webpack_require__(19)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(30)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(55).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(1);
var toIObject = __webpack_require__(5);
var arrayIndexOf = __webpack_require__(52)(false);
var IE_PROTO = __webpack_require__(19)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(33);
var hiddenKeys = __webpack_require__(21).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _app = __webpack_require__(38);

var _app2 = _interopRequireDefault(_app);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _app2.default;

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue__);
/* harmony namespace reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_bced26ea_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_app_vue__ = __webpack_require__(75);
var disposed = false
var normalizeComponent = __webpack_require__(39)
/* script */


/* template */

/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_app_vue___default.a,
  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_bced26ea_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_app_vue__["a" /* default */],
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "src\\app.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-bced26ea", Component.options)
  } else {
    hotAPI.reload("data-v-bced26ea", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

/* harmony default export */ __webpack_exports__["default"] = (Component.exports);


/***/ }),
/* 39 */
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file.
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate

    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _webRTCSupport = __webpack_require__(41);

var isWebRTCSupported = false;
var support = {};
var backCallFunc;
var isMobile = {
    Android: function Android() {
        return (/Android/i.test(navigator.userAgent)
        );
    },
    iOS: function iOS() {
        return (/iPhone|iPad|iPod/i.test(navigator.userAgent)
        );
    },
    safari: function safari() {
        return navigator.userAgent.toLowerCase().indexOf('safari/') > -1 && navigator.userAgent.toLowerCase().indexOf('chrome/') === -1;
    },
    PC: function PC() {}
};
['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function (item) {
    if (isWebRTCSupported) {
        return;
    }
    if (item in window) {
        isWebRTCSupported = true;
    }
});
try {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext = new AudioContext();
} catch (e) {
    console.log('Failed to instantiate an audio context, error: ' + e);
}
// 截取版本号
function checkTBSVersion(ua) {
    var list = ua.split(" ");
    for (var i = 0; i < list.length; i++) {
        var item = list[i];
        if (item.indexOf("TBS") !== -1 || item.indexOf("tbs") !== -1) {
            var versionStr = item.split("/")[1];
            var version = parseInt(versionStr) || 0;
            return version;
        }
    }
    return null;
}
// 打印成功失败原因
function onMessage(str) {
    console.log(str);
}
// 分辨率检测结果
function onSupportTestDone(result) {
    if (result === 0) {
        support.resolution = true;
    } else {
        support.resolution = false;
    }
    // alert(JSON.stringify(support))
    backCallFunc(support);
    // 是否需要连接测试
    // startConnectionTest();
}
// 分辨率检测
function startSupportTest() {
    var supportTest = new _webRTCSupport.WebRTCTest();
    supportTest.setListener({
        onMessage: onMessage,
        done: onSupportTestDone
    });
    var resolutionArray = [[1280, 720], [960, 540], [640, 360], [640, 480], [480, 264], [320, 180]];
    var supTest = new _webRTCSupport.CameraTest(supportTest, resolutionArray);
    supTest.run();
}
// 视频检测结果
function onVideoTestDone(result) {
    if (result === 0) {
        support.video = true;
    } else {
        support.video = false;
    }
    // 开始分辨率检测
    startSupportTest();
}
// 视频检测
function startVideoTest() {
    var videoTest = new _webRTCSupport.WebRTCTest();
    videoTest.setListener({
        onMessage: onMessage,
        done: onVideoTestDone
    });
    var camTest = new _webRTCSupport.CameraTest(videoTest, [[640, 360], [640, 480]]);
    camTest.run();
}
// 音频检测结果
function onAudioTestDone(result) {
    if (result === 0) {
        support.audio = true;
    } else {
        support.audio = false;
    }
    // 开始视频检测
    startVideoTest();
}
// 音频检测
function startAudioTest() {
    var audioTest = new _webRTCSupport.WebRTCTest();
    audioTest.setListener({
        onMessage: onMessage,
        done: onAudioTestDone
    });
    var micTest = new _webRTCSupport.MicTest(audioTest);
    micTest.run();
}
// 浏览器检测
function startBrowserTest(backCall) {
    backCallFunc = backCall;
    var isMobileBrowser = false;
    for (var a in isMobile) {
        if (isMobile[a]()) {
            isMobileBrowser = true;
            var version = checkTBSVersion(navigator.userAgent);
            if (a === 'Android' && version && version < 43600) {
                console.log("Android (version:" + version + ") 不支持 !!!");
                support.browser = false;
            } else if (!isWebRTCSupported || !isMobile.safari() && isMobile.iOS()) {
                console.log(a + "当前浏览器不支持 !!!");
                support.browser = false;
            } else {
                if (isMobile.safari() && isMobile.iOS()) {
                    //ios 11 版本 11.0.3 以下不支持
                    var matches = navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);
                    if (matches && matches[1] >= 11 && (matches[2] >= 1 || matches[3] >= 3)) {
                        console.log(matches[0] + " 当前浏览器支持 !!!");
                        support.browser = true;
                    } else {
                        console.log(matches[0] + "  不支持 !!!");
                        support.browser = false;
                    }
                } else {
                    console.log(a + " 当前浏览器支持 !!!");
                    support.browser = true;
                }
            }
            break;
        }
    }

    if (!isMobileBrowser) {
        if (isWebRTCSupported) {
            console.log("pc当前浏览器 支持 !!!");
            support.browser = true;
        } else {
            console.log("pc当前浏览器 不支持 !!!");
            support.browser = false;
        }
    }
    if (support.browser) {
        // 开始音频检测
        startAudioTest();
    } else {
        // alert(JSON.stringify(support))
        backCallFunc(support);
    }
}
// window.onload = function () {
//     // 开始浏览器检测
//     startBrowserTest();
// }

exports.default = startBrowserTest;

// 是否需要检测连接
// 权限谁要
// 是否需要每项的权限检测
// 怎么引入

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CameraTest = exports.MicTest = exports.WebRTCTest = undefined;

var _typeof2 = __webpack_require__(42);

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = __webpack_require__(73);

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.AudioContext = window.AudioContext || window.webkitAudioContext;

var isMobile = {
    Android: function Android() {
        return (/Android/i.test(navigator.userAgent)
        );
    },
    iOS: function iOS() {
        return (/iPhone|iPad|iPod/i.test(navigator.userAgent)
        );
    },
    safari: function safari() {
        return navigator.userAgent.toLowerCase().indexOf('safari/') > -1 && navigator.userAgent.toLowerCase().indexOf('chrome/') === -1;
    },
    PC: function PC() {}
};

function Report() {
    this.output_ = [];
    this.nextAsyncId_ = 0;
    this.nativeLog_ = console.log.bind(console);
    console.log = this.logHook_.bind(this);
    window.addEventListener('error', this.onWindowError_.bind(this));
    this.traceEventInstant('system-info', Report.getSystemInfo());
}

Report.prototype = {
    traceEventInstant: function traceEventInstant(name, args) {
        this.output_.push({ 'ts': Date.now(),
            'name': name,
            'args': args });
    },

    traceEventWithId: function traceEventWithId(name, id, args) {
        this.output_.push({ 'ts': Date.now(),
            'name': name,
            'id': id,
            'args': args });
    },

    traceEventAsync: function traceEventAsync(name) {
        return this.traceEventWithId.bind(this, name, this.nextAsyncId_++);
    },

    logTestRunResult: function logTestRunResult(testName, status) {
        ga('send', {
            'hitType': 'event',
            'eventCategory': 'Test',
            'eventAction': status,
            'eventLabel': testName,
            'nonInteraction': 1
        });
    },

    generate: function generate(bugDescription) {
        var header = { 'title': 'WebRTC Troubleshooter bug report',
            'description': bugDescription || null };
        return this.getContent_(header);
    },

    getContent_: function getContent_(contentHead) {
        var stringArray = [];
        this.appendEventsAsString_([contentHead] || [], stringArray);
        this.appendEventsAsString_(this.output_, stringArray);
        return '[' + stringArray.join(',\n') + ']';
    },

    appendEventsAsString_: function appendEventsAsString_(events, output) {
        for (var i = 0; i !== events.length; ++i) {
            output.push((0, _stringify2.default)(events[i]));
        }
    },

    onWindowError_: function onWindowError_(error) {
        this.traceEventInstant('error', { 'message': error.message,
            'filename': error.filename + ':' + error.lineno });
    },

    logHook_: function logHook_() {
        this.traceEventInstant('log', arguments);
        this.nativeLog_.apply(null, arguments);
    }
};

Report.getSystemInfo = function () {
    var agent = navigator.userAgent;
    var browserName = navigator.appName;
    var version = '' + parseFloat(navigator.appVersion);
    var offsetName;
    var offsetVersion;
    var ix;

    if ((offsetVersion = agent.indexOf('Chrome')) !== -1) {
        browserName = 'Chrome';
        version = agent.substring(offsetVersion + 7);
    } else if ((offsetVersion = agent.indexOf('MSIE')) !== -1) {
        browserName = 'Microsoft Internet Explorer'; // Older IE versions.
        version = agent.substring(offsetVersion + 5);
    } else if ((offsetVersion = agent.indexOf('Trident')) !== -1) {
        browserName = 'Microsoft Internet Explorer'; // Newer IE versions.
        version = agent.substring(offsetVersion + 8);
    } else if ((offsetVersion = agent.indexOf('Firefox')) !== -1) {
        browserName = 'Firefox';
    } else if ((offsetVersion = agent.indexOf('Safari')) !== -1) {
        browserName = 'Safari';
        version = agent.substring(offsetVersion + 7);
        if ((offsetVersion = agent.indexOf('Version')) !== -1) {
            version = agent.substring(offsetVersion + 8);
        }
    } else if ((offsetName = agent.lastIndexOf(' ') + 1) < (offsetVersion = agent.lastIndexOf('/'))) {
        browserName = agent.substring(offsetName, offsetVersion);
        version = agent.substring(offsetVersion + 1);
        if (browserName.toLowerCase() === browserName.toUpperCase()) {
            browserName = navigator.appName;
        }
    }
    if ((ix = version.indexOf(';')) !== -1) {
        version = version.substring(0, ix);
    }
    if ((ix = version.indexOf(' ')) !== -1) {
        version = version.substring(0, ix);
    }
    return { 'browserName': browserName,
        'browserVersion': version,
        'platform': navigator.platform };
};

function Ssim() {}

Ssim.prototype = {
    statistics: function statistics(a) {
        var accu = 0;
        var i;
        for (i = 0; i < a.length; ++i) {
            accu += a[i];
        }
        var meanA = accu / (a.length - 1);
        var diff = 0;
        for (i = 1; i < a.length; ++i) {
            diff = a[i - 1] - meanA;
            accu += a[i] + diff * diff;
        }
        return { mean: meanA, variance: accu / a.length };
    },

    covariance: function covariance(a, b, meanA, meanB) {
        var accu = 0;
        for (var i = 0; i < a.length; i += 1) {
            accu += (a[i] - meanA) * (b[i] - meanB);
        }
        return accu / a.length;
    },

    calculate: function calculate(x, y) {
        if (x.length !== y.length) {
            return 0;
        }

        var K1 = 0.01;
        var K2 = 0.03;
        var L = 255;
        var C1 = K1 * L * (K1 * L);
        var C2 = K2 * L * (K2 * L);
        var C3 = C2 / 2;

        var statsX = this.statistics(x);
        var muX = statsX.mean;
        var sigmaX2 = statsX.variance;
        var sigmaX = Math.sqrt(sigmaX2);
        var statsY = this.statistics(y);
        var muY = statsY.mean;
        var sigmaY2 = statsY.variance;
        var sigmaY = Math.sqrt(sigmaY2);
        var sigmaXy = this.covariance(x, y, muX, muY);

        var luminance = (2 * muX * muY + C1) / (muX * muX + muY * muY + C1);
        var structure = (sigmaXy + C3) / (sigmaX * sigmaY + C3);
        var contrast = (2 * sigmaX * sigmaY + C2) / (sigmaX2 + sigmaY2 + C2);

        return luminance * contrast * structure;
    }
};

function StatisticsAggregate(rampUpThreshold) {
    this.startTime_ = 0;
    this.sum_ = 0;
    this.count_ = 0;
    this.max_ = 0;
    this.rampUpThreshold_ = rampUpThreshold;
    this.rampUpTime_ = Infinity;
}

StatisticsAggregate.prototype = {
    add: function add(time, datapoint) {
        if (this.startTime_ === 0) {
            this.startTime_ = time;
        }
        this.sum_ += datapoint;
        this.max_ = Math.max(this.max_, datapoint);
        if (this.rampUpTime_ === Infinity && datapoint > this.rampUpThreshold_) {
            this.rampUpTime_ = time;
        }
        this.count_++;
    },

    getAverage: function getAverage() {
        if (this.count_ === 0) {
            return 0;
        }
        return Math.round(this.sum_ / this.count_);
    },

    getMax: function getMax() {
        return this.max_;
    },

    getRampUpTime: function getRampUpTime() {
        return this.rampUpTime_ - this.startTime_;
    }
};

function arrayAverage(array) {
    var cnt = array.length;
    var tot = 0;
    for (var i = 0; i < cnt; i++) {
        tot += array[i];
    }
    return Math.floor(tot / cnt);
}

function arrayMax(array) {
    if (array.length === 0) {
        return NaN;
    }
    return Math.max.apply(Math, array);
}

function arrayMin(array) {
    if (array.length === 0) {
        return NaN;
    }
    return Math.min.apply(Math, array);
}

function MicTest(test) {
    this.test = test;
    this.inputChannelCount = 6;
    this.outputChannelCount = 2;
    this.device = {
        audioid: "",
        videoid: ""
    };
    // Buffer size set to 0 to let Chrome choose based on the platform.
    this.bufferSize = 0;
    // Turning off echoCancellation constraint enables stereo input.
    this.constraints = {
        audio: {
            optional: [{ echoCancellation: false }]
        }
    };

    this.collectSeconds = 2.0;
    // At least one LSB 16-bit data (compare is on absolute value).
    this.silentThreshold = 1.0 / 32767;
    this.lowVolumeThreshold = -60;
    // Data must be identical within one LSB 16-bit to be identified as mono.
    this.monoDetectThreshold = 1.0 / 65536;
    // Number of consequtive clipThreshold level samples that indicate clipping.
    this.clipCountThreshold = 6;
    this.clipThreshold = 1.0;

    // Populated with audio as a 3-dimensional array:
    //   collectedAudio[channels][buffers][samples]
    this.collectedAudio = [];
    this.collectedSampleCount = 0;
    for (var i = 0; i < this.inputChannelCount; ++i) {
        this.collectedAudio[i] = [];
    }
}

function audioInputTest() {
    $("#meters").show();
    /*
    *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.
    *
    *  Use of this source code is governed by a BSD-style license
    *  that can be found in the LICENSE file in the root of the source
    *  tree.
    */

    /* global AudioContext, SoundMeter */

    'use strict';

    var instantMeter = document.querySelector('#instant meter');
    var slowMeter = document.querySelector('#slow meter');
    var clipMeter = document.querySelector('#clip meter');

    var instantValueDisplay = document.querySelector('#instant .value');
    var slowValueDisplay = document.querySelector('#slow .value');
    var clipValueDisplay = document.querySelector('#clip .value');

    try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        window.audioContext = new AudioContext();
    } catch (e) {
        alert('Web Audio API not supported.');
    }

    // Put variables in global scope to make them available to the browser console.
    var constraints = window.constraints = {
        audio: true,
        video: false
    };

    function handleSuccess(stream) {
        // Put variables in global scope to make them available to the
        // browser console.
        window.stream = stream;
        var soundMeter = window.soundMeter = new SoundMeter(window.audioContext);
        soundMeter.connectToSource(stream, function (e) {
            if (e) {
                alert(e);
                return;
            }
            setInterval(function () {
                instantMeter.value = instantValueDisplay.innerText = soundMeter.instant.toFixed(2);
                slowMeter.value = slowValueDisplay.innerText = soundMeter.slow.toFixed(2);
                clipMeter.value = clipValueDisplay.innerText = soundMeter.clip;
            }, 200);
        });
    }

    function handleError(error) {
        console.log('navigator.getUserMedia error: ', error);
    }

    navigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(handleError);
}

function enumDevice(onOk, onError) {
    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
        console.log("enumerateDevices() not supported.");
        onError('enumerateDevices() not supported.');
        return;
    }
    navigator.mediaDevices.enumerateDevices().then(function (sourceInfos) {
        onOk(sourceInfos);
    }).catch(function (err) {
        console.log('JS Device selection not supported', err);
        onError(err);
    });
}

function getDeviceName(tracks) {
    if (tracks.length === 0) {
        return null;
    }
    return tracks[0].label;
}

function appendSourceId(id, type, constraints) {
    if (constraints[type] === true) {
        constraints[type] = { optional: [{ sourceId: id }] };
    } else if ((0, _typeof3.default)(constraints[type]) === 'object') {
        if (typeof constraints[type].optional === 'undefined') {
            constraints[type].optional = [];
        }
        constraints[type].optional.push({ sourceId: id });
    }
}

function doGetUserMedia(constraints, onSuccess, reportFatal, audioid, videoid) {
    var self = this;
    var traceGumEvent = report.traceEventAsync('getusermedia');
    if (audioid) {
        appendSourceId(audioid, "audio", constraints);
    }
    if (videoid) {
        appendSourceId(videoid, "video", constraints);
    }
    try {
        traceGumEvent({ 'status': 'pending', 'constraints': constraints });

        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            console.log("enumerateDevices() not supported.");
            reportFatal('enumerateDevices() not supported.');
            return;
        }
        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            var cam = getDeviceName(stream.getVideoTracks());
            var mic = getDeviceName(stream.getAudioTracks());
            traceGumEvent({ 'status': 'success', 'camera': cam,
                'microphone': mic });
            onSuccess.apply(this, arguments);
        }).catch(function (error) {
            traceGumEvent({ 'status': 'fail', 'error': error });
            reportFatal('Failed to get access to local media due to ' + 'error: ' + error.name);
        });
    } catch (e) {
        console.log(e);
        traceGumEvent({ 'status': 'exception', 'error': e.message });
        return reportFatal('getUserMedia failed with exception: ' + e.message);
    }
}

function setTimeoutWithProgressBar(timeoutCallback, timeoutMs) {
    var start = window.performance.now();

    var timeoutTask = function timeoutTask() {
        timeoutCallback();
    };
    var timer = setTimeout(timeoutTask, timeoutMs);
    var finishProgressBar = function finishProgressBar() {
        clearTimeout(timer);
        timeoutTask();
    };
    return finishProgressBar;
}

MicTest.prototype = {
    run: function run() {
        if (typeof audioContext === 'undefined') {
            this.test.reportError('WebAudio/webkitAudioContext is not supported, test cannot run.');
            this.test.done();
        } else {
            var that = this;
            enumDevice(function (source) {
                var audioId = "",
                    videoId = "";
                for (var i = 0; i < source.length; i++) {
                    var item = source[i];
                    if (item.kind == 'audioinput') {
                        if (!audioId) {
                            audioId = item.deviceId;
                        }
                    } else if (item.kind == "videoinput") {
                        if (!videoId) {
                            videoId = item.deviceId;
                        }
                    }
                }
                that.device.audioid = audioId;
                that.device.videoid = videoId;
                doGetUserMedia(that.constraints, that.gotStream.bind(that), function (error) {
                    that.test.reportFatal(error);
                }, audioId, videoId);
            }, function (error) {
                that.test.reportError('WebAudio is not supported, test cannot run.');
                that.test.done();
            });
        }
    },
    gotStream: function gotStream(stream) {
        if (!this.checkAudioTracks(stream)) {
            this.test.done();
            return;
        }

        //ios 暂不支持获取
        if (isMobile.iOS() && isMobile.safari()) {
            this.test.done();
            return;
        }
        this.test.done();

        // this.createAudioBuffer(stream);
    },
    checkAudioTracks: function checkAudioTracks(stream) {
        this.stream = stream;
        var audioTracks = stream.getAudioTracks();
        if (audioTracks.length < 1) {
            this.test.reportError('No audio track in returned stream.');
            return false;
        }
        this.test.reportSuccess('Audio track created using device=' + audioTracks[0].label);
        return true;
    },
    createAudioBuffer: function createAudioBuffer() {
        this.audioSource = audioContext.createMediaStreamSource(this.stream);
        this.scriptNode = audioContext.createScriptProcessor(this.bufferSize, this.inputChannelCount, this.outputChannelCount);
        this.audioSource.connect(this.scriptNode);
        this.scriptNode.connect(audioContext.destination);
        this.scriptNode.onaudioprocess = this.collectAudio.bind(this);
        this.stopCollectingAudio = setTimeoutWithProgressBar(this.onStopCollectingAudio.bind(this), 5000);
    },
    collectAudio: function collectAudio(event) {
        var sampleCount = event.inputBuffer.length;
        var allSilent = true;
        for (var c = 0; c < event.inputBuffer.numberOfChannels; c++) {
            var data = event.inputBuffer.getChannelData(c);
            var first = Math.abs(data[0]);
            var last = Math.abs(data[sampleCount - 1]);
            var newBuffer;
            if (first > this.silentThreshold || last > this.silentThreshold) {
                newBuffer = new Float32Array(sampleCount);
                newBuffer.set(data);
                allSilent = false;
            } else {
                newBuffer = new Float32Array();
            }
            this.collectedAudio[c].push(newBuffer);
        }
        if (!allSilent) {
            this.collectedSampleCount += sampleCount;
            if (this.collectedSampleCount / event.inputBuffer.sampleRate >= this.collectSeconds) {
                this.stopCollectingAudio();
            }
        }
    },

    onStopCollectingAudio: function onStopCollectingAudio() {
        this.stream.getAudioTracks()[0].stop();
        this.audioSource.disconnect(this.scriptNode);
        this.scriptNode.disconnect(audioContext.destination);
        this.analyzeAudio(this.collectedAudio);
        this.test.done();
    },

    analyzeAudio: function analyzeAudio(channels) {
        var activeChannels = [];
        for (var c = 0; c < channels.length; c++) {
            if (this.channelStats(c, channels[c])) {
                activeChannels.push(c);
            }
        }
        if (activeChannels.length === 0) {
            this.test.reportError('No active input channels detected. Microphone ' + 'is most likely muted or broken, please check if muted in the ' + 'sound settings or physically on the device. Then rerun the test.');
        } else {
            this.test.reportSuccess('Active audio input channels: ' + activeChannels.length);
        }
        if (activeChannels.length === 2) {
            this.detectMono(channels[activeChannels[0]], channels[activeChannels[1]]);
        }
    },

    channelStats: function channelStats(channelNumber, buffers) {
        var maxPeak = 0.0;
        var maxRms = 0.0;
        var clipCount = 0;
        var maxClipCount = 0;
        for (var j = 0; j < buffers.length; j++) {
            var samples = buffers[j];
            if (samples.length > 0) {
                var s = 0;
                var rms = 0.0;
                for (var i = 0; i < samples.length; i++) {
                    s = Math.abs(samples[i]);
                    maxPeak = Math.max(maxPeak, s);
                    rms += s * s;
                    if (maxPeak >= this.clipThreshold) {
                        clipCount++;
                        maxClipCount = Math.max(maxClipCount, clipCount);
                    } else {
                        clipCount = 0;
                    }
                }

                rms = Math.sqrt(rms / samples.length);
                maxRms = Math.max(maxRms, rms);
            }
        }

        if (maxPeak > this.silentThreshold) {
            var dBPeak = this.dBFS(maxPeak);
            var dBRms = this.dBFS(maxRms);
            this.test.reportInfo('Channel ' + channelNumber + ' levels: ' + dBPeak.toFixed(1) + ' dB (peak), ' + dBRms.toFixed(1) + ' dB (RMS)');
            if (dBRms < this.lowVolumeThreshold) {
                this.test.reportError('Microphone input level is low, increase input ' + 'volume or move closer to the microphone.');
            }
            if (maxClipCount > this.clipCountThreshold) {
                this.test.reportWarning('Clipping detected! Microphone input level ' + 'is high. Decrease input volume or move away from the microphone.');
            }
            return true;
        } else {
            return false;
        }
    },

    detectMono: function detectMono(buffersL, buffersR) {
        var diffSamples = 0;
        for (var j = 0; j < buffersL.length; j++) {
            var l = buffersL[j];
            var r = buffersR[j];
            if (l.length === r.length) {
                var d = 0.0;
                for (var i = 0; i < l.length; i++) {
                    d = Math.abs(l[i] - r[i]);
                    if (d > this.monoDetectThreshold) {
                        diffSamples++;
                    }
                }
            } else {
                diffSamples++;
            }
        }
        if (diffSamples > 0) {
            this.test.reportInfo('Stereo microphone detected.');
        } else {
            this.test.reportInfo('Mono microphone detected.');
        }
    },

    dBFS: function dBFS(gain) {
        var dB = 20 * Math.log(gain) / Math.log(10);
        return Math.round(dB * 10) / 10;
    }
};

function CameraTest(test, resolutions) {
    this.test = test;
    this.resolutions = resolutions;
    this.currentResolution = 0;
    this.isMuted = false;
    this.isShuttingDown = false;
}

CameraTest.prototype = {
    run: function run() {
        this.maybeContinueGetUserMedia();
    },
    startGetUserMedia: function startGetUserMedia(resolution) {
        var constraints = {
            audio: false,
            video: { width: { exact: resolution[0] },
                height: { exact: resolution[1] } }
        };
        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            console.log("enumerateDevices() not supported.");
            this.test.reportError('enumerateDevices() not supported.');
            return;
        }
        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            if (this.resolutions.length > 1) {
                this.test.reportSuccess('Supported: ' + resolution[0] + 'x' + resolution[1]);
                stream.getTracks().forEach(function (track) {
                    track.stop();
                });
                this.maybeContinueGetUserMedia();
            } else {
                this.collectAndAnalyzeStats_(stream, resolution);
            }
        }.bind(this)).catch(function (error) {
            if (this.resolutions.length > 1) {
                this.test.reportInfo(resolution[0] + 'x' + resolution[1] + ' not supported');
            } else {
                this.test.reportError('getUserMedia failed with error: ' + error.name);
            }
            this.maybeContinueGetUserMedia();
        }.bind(this));
    },
    maybeContinueGetUserMedia: function maybeContinueGetUserMedia() {
        if (this.currentResolution === this.resolutions.length) {
            this.test.done();
            return;
        }

        var index = this.currentResolution++;
        console.debug(index, this.resolutions[index]);
        this.startGetUserMedia(this.resolutions[index]);
    },
    collectAndAnalyzeStats_: function collectAndAnalyzeStats_(stream, resolution) {
        var tracks = stream.getVideoTracks();
        if (tracks.length < 1) {
            this.test.reportError('No video track in returned stream.');
            this.maybeContinueGetUserMedia();
            return;
        }

        //ios 认为可用
        // if( isMobile.iOS() && isMobile.safari() ){
        //     this.test.done();
        //     this.successCount ++;
        //     return;
        // }
        var videoTrack = tracks[0];
        if (typeof videoTrack.addEventListener === 'function') {

            videoTrack.addEventListener('ended', function () {
                if (this.isShuttingDown) {
                    return;
                }
                this.test.reportError('Video track ended, camera stopped working');
            }.bind(this));

            videoTrack.addEventListener('mute', function () {
                if (this.isShuttingDown) {
                    return;
                }
                this.test.reportWarning('Your camera reported itself as muted.');
                this.isMuted = true;
            }.bind(this));

            videoTrack.addEventListener('unmute', function () {
                if (this.isShuttingDown) {
                    return;
                }
                this.test.reportInfo('Your camera reported itself as unmuted.');
                this.isMuted = false;
            }.bind(this));
        }

        var video = document.createElement('video');
        video.setAttribute('autoplay', '');
        video.setAttribute('muted', '');
        video.width = resolution[0];
        video.height = resolution[1];
        video.srcObject = stream;
        var frameChecker = new VideoFrameChecker(video);
        var call = new Call(null, this.test);
        call.pc1.addStream(stream);
        call.establishConnection();
        call.gatherStats(call.pc1, stream, this.onCallEnded_.bind(this, resolution, video, stream, frameChecker), 100);

        setTimeoutWithProgressBar(this.endCall_.bind(this, call, stream), 8000);
    },
    onCallEnded_: function onCallEnded_(resolution, videoElement, stream, frameChecker, stats, statsTime) {
        this.analyzeStats_(resolution, videoElement, stream, frameChecker, stats, statsTime);

        frameChecker.stop();

        this.test.done();
    },
    analyzeStats_: function analyzeStats_(resolution, videoElement, stream, frameChecker, stats, statsTime) {
        var googAvgEncodeTime = [];
        var googAvgFrameRateInput = [];
        var googAvgFrameRateSent = [];
        var statsReport = {};
        var frameStats = frameChecker.frameStats;

        for (var index in stats) {
            if (stats[index].type === 'ssrc') {
                if (parseInt(stats[index].googFrameRateInput) > 0) {
                    googAvgEncodeTime.push(parseInt(stats[index].googAvgEncodeMs));
                    googAvgFrameRateInput.push(parseInt(stats[index].googFrameRateInput));
                    googAvgFrameRateSent.push(parseInt(stats[index].googFrameRateSent));
                }
            }
        }

        statsReport.cameraName = stream.getVideoTracks()[0].label || NaN;
        statsReport.actualVideoWidth = videoElement.videoWidth;
        statsReport.actualVideoHeight = videoElement.videoHeight;
        statsReport.mandatoryWidth = resolution[0];
        statsReport.mandatoryHeight = resolution[1];
        statsReport.encodeSetupTimeMs = this.extractEncoderSetupTime_(stats, statsTime);
        statsReport.avgEncodeTimeMs = arrayAverage(googAvgEncodeTime);
        statsReport.minEncodeTimeMs = arrayMin(googAvgEncodeTime);
        statsReport.maxEncodeTimeMs = arrayMax(googAvgEncodeTime);
        statsReport.avgInputFps = arrayAverage(googAvgFrameRateInput);
        statsReport.minInputFps = arrayMin(googAvgFrameRateInput);
        statsReport.maxInputFps = arrayMax(googAvgFrameRateInput);
        statsReport.avgSentFps = arrayAverage(googAvgFrameRateSent);
        statsReport.minSentFps = arrayMin(googAvgFrameRateSent);
        statsReport.maxSentFps = arrayMax(googAvgFrameRateSent);
        statsReport.isMuted = this.isMuted;
        statsReport.testedFrames = frameStats.numFrames;
        statsReport.blackFrames = frameStats.numBlackFrames;
        statsReport.frozenFrames = frameStats.numFrozenFrames;

        report.traceEventInstant('video-stats', statsReport);

        this.testExpectations_(statsReport);
    },
    endCall_: function endCall_(callObject, stream) {
        this.isShuttingDown = true;
        stream.getTracks().forEach(function (track) {
            track.stop();
        });
        callObject.close();
    },
    extractEncoderSetupTime_: function extractEncoderSetupTime_(stats, statsTime) {
        for (var index = 0; index !== stats.length; index++) {
            if (stats[index].type === 'ssrc') {
                if (parseInt(stats[index].googFrameRateInput) > 0) {
                    return (0, _stringify2.default)(statsTime[index] - statsTime[0]);
                }
            }
        }
        return NaN;
    },
    resolutionMatchesIndependentOfRotationOrCrop_: function resolutionMatchesIndependentOfRotationOrCrop_(aWidth, aHeight, bWidth, bHeight) {
        var minRes = Math.min(bWidth, bHeight);
        return aWidth === bWidth && aHeight === bHeight || aWidth === bHeight && aHeight === bWidth || aWidth === minRes && bHeight === minRes;
    },
    testExpectations_: function testExpectations_(info) {
        var notAvailableStats = [];
        for (var key in info) {
            if (info.hasOwnProperty(key)) {
                if (typeof info[key] === 'number' && isNaN(info[key])) {
                    notAvailableStats.push(key);
                } else {
                    this.test.reportInfo(key + ': ' + info[key]);
                }
            }
        }
        if (notAvailableStats.length !== 0) {
            this.test.reportInfo('Not available: ' + notAvailableStats.join(', '));
        }

        if (isNaN(info.avgSentFps)) {
            this.test.reportInfo('Cannot verify sent FPS.');
        } else if (info.avgSentFps < 5) {
            this.test.reportError('Low average sent FPS: ' + info.avgSentFps);
        } else {
            this.test.reportSuccess('Average FPS above threshold');
        }
        if (!this.resolutionMatchesIndependentOfRotationOrCrop_(info.actualVideoWidth, info.actualVideoHeight, info.mandatoryWidth, info.mandatoryHeight)) {
            this.test.reportError('Incorrect captured resolution.');
        } else {
            this.test.reportSuccess('Captured video using expected resolution.');
        }
        /*if (info.testedFrames === 0) {
            this.test.reportError('Could not analyze any video frame.');
        } else {
            if (info.blackFrames > info.testedFrames / 3) {
                this.test.reportError('Camera delivering lots of black frames.');
            }
            if (info.frozenFrames > info.testedFrames / 3) {
                this.test.reportError('Camera delivering lots of frozen frames.');
            }
        }*/
    }
};

function VideoFrameChecker(videoElement) {
    this.frameStats = {
        numFrozenFrames: 0,
        numBlackFrames: 0,
        numFrames: 0
    };

    this.running_ = true;

    this.nonBlackPixelLumaThreshold = 20;
    this.previousFrame_ = [];
    this.identicalFrameSsimThreshold = 0.985;
    this.frameComparator = new Ssim();

    this.canvas_ = document.createElement('canvas');
    this.videoElement_ = videoElement;
    this.listener_ = this.checkVideoFrame_.bind(this);
    this.videoElement_.addEventListener('play', this.listener_, false);
}

VideoFrameChecker.prototype = {
    stop: function stop() {
        this.videoElement_.removeEventListener('play', this.listener_);
        this.running_ = false;
    },

    getCurrentImageData_: function getCurrentImageData_() {
        this.canvas_.width = this.videoElement_.width;
        this.canvas_.height = this.videoElement_.height;

        var context = this.canvas_.getContext('2d');
        context.drawImage(this.videoElement_, 0, 0, this.canvas_.width, this.canvas_.height);
        return context.getImageData(0, 0, this.canvas_.width, this.canvas_.height);
    },

    checkVideoFrame_: function checkVideoFrame_() {
        if (!this.running_) {
            return;
        }
        if (this.videoElement_.ended) {
            return;
        }

        var imageData = this.getCurrentImageData_();

        if (this.isBlackFrame_(imageData.data, imageData.data.length)) {
            this.frameStats.numBlackFrames++;
        }

        if (this.frameComparator.calculate(this.previousFrame_, imageData.data) > this.identicalFrameSsimThreshold) {
            this.frameStats.numFrozenFrames++;
        }
        this.previousFrame_ = imageData.data;

        this.frameStats.numFrames++;
        setTimeout(this.checkVideoFrame_.bind(this), 20);
    },

    isBlackFrame_: function isBlackFrame_(data, length) {
        var thresh = this.nonBlackPixelLumaThreshold;
        var accuLuma = 0;
        for (var i = 4; i < length; i += 4) {
            // Use Luma as in Rec. 709: Y′709 = 0.21R + 0.72G + 0.07B;
            accuLuma += 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];
            // Early termination if the average Luma so far is bright enough.
            if (accuLuma > thresh * i / 4) {
                return false;
            }
        }
        return true;
    }
};

function Call(config, test) {
    this.test = test;
    this.traceEvent = report.traceEventAsync('call');
    this.traceEvent({ config: config });
    this.statsGatheringRunning = false;

    this.pc1 = new RTCPeerConnection(config);
    this.pc2 = new RTCPeerConnection(config);

    this.pc1.addEventListener('icecandidate', this.onIceCandidate_.bind(this, this.pc2));
    this.pc2.addEventListener('icecandidate', this.onIceCandidate_.bind(this, this.pc1));

    this.iceCandidateFilter_ = Call.noFilter;
}

Call.prototype = {
    establishConnection: function establishConnection() {
        this.traceEvent({ state: 'start' });
        this.pc1.createOffer().then(this.gotOffer_.bind(this), this.test.reportFatal.bind(this.test));
    },

    close: function close() {
        this.traceEvent({ state: 'end' });
        this.pc1.close();
        this.pc2.close();
    },

    setIceCandidateFilter: function setIceCandidateFilter(filter) {
        this.iceCandidateFilter_ = filter;
    },

    constrainVideoBitrate: function constrainVideoBitrate(maxVideoBitrateKbps) {
        this.constrainVideoBitrateKbps_ = maxVideoBitrateKbps;
    },

    disableVideoFec: function disableVideoFec() {
        this.constrainOfferToRemoveVideoFec_ = true;
    },

    gatherStats: function gatherStats(peerConnection, localStream, statsCb) {
        var stats = [];
        var statsCollectTime = [];
        var self = this;
        var statStepMs = 100;

        var selector = adapter.browserDetails.browser === 'chrome' ? localStream : null;
        var track = peerConnection.getLocalStreams()[0].getVideoTracks()[0];
        this.statsGatheringRunning = true;
        getStats_();

        function getStats_() {
            if (peerConnection.signalingState === 'closed') {
                self.statsGatheringRunning = false;
                statsCb(stats, statsCollectTime);
                return;
            }

            peerConnection.getStats(selector, function (report) {
                gotStats_(report);
            }, function (error) {
                console.error("get stats error : " + error);
                statsCb(stats, statsCollectTime);
            });
        }

        function gotStats_(response) {
            if (adapter.browserDetails.browser === 'chrome') {
                response.forEach(function (value, key, map) {
                    stats.push(value);
                    statsCollectTime.push(Date.now());
                });
            } else if (adapter.browserDetails.browser === 'firefox') {
                for (var j in response) {
                    var stat = response[j];
                    stats.push(stat);
                    statsCollectTime.push(Date.now());
                }
            } else {
                self.test.reportError('Only Firefox and Chrome getStats ' + 'implementations are supported.');
            }
            setTimeout(getStats_, statStepMs);
        }
    },

    gotOffer_: function gotOffer_(offer) {
        if (this.constrainOfferToRemoveVideoFec_) {
            offer.sdp = offer.sdp.replace(/(m=video 1 [^\r]+)(116 117)(\r\n)/g, '$1\r\n');
            offer.sdp = offer.sdp.replace(/a=rtpmap:116 red\/90000\r\n/g, '');
            offer.sdp = offer.sdp.replace(/a=rtpmap:117 ulpfec\/90000\r\n/g, '');
            offer.sdp = offer.sdp.replace(/a=rtpmap:98 rtx\/90000\r\n/g, '');
            offer.sdp = offer.sdp.replace(/a=fmtp:98 apt=116\r\n/g, '');
        }
        this.pc1.setLocalDescription(offer);
        this.pc2.setRemoteDescription(offer);
        this.pc2.createAnswer().then(this.gotAnswer_.bind(this), this.test.reportFatal.bind(this.test));
    },

    gotAnswer_: function gotAnswer_(answer) {
        if (this.constrainVideoBitrateKbps_) {
            answer.sdp = answer.sdp.replace(/a=mid:video\r\n/g, 'a=mid:video\r\nb=AS:' + this.constrainVideoBitrateKbps_ + '\r\n');
        }
        this.pc2.setLocalDescription(answer);
        this.pc1.setRemoteDescription(answer);
    },

    onIceCandidate_: function onIceCandidate_(otherPeer, event) {
        if (event.candidate) {
            var parsed = Call.parseCandidate(event.candidate.candidate);
            if (this.iceCandidateFilter_(parsed)) {
                otherPeer.addIceCandidate(event.candidate);
            }
        }
    }
};

Call.noFilter = function () {
    return true;
};

Call.isRelay = function (candidate) {
    return candidate.type === 'relay';
};

Call.isNotHostCandidate = function (candidate) {
    return candidate.type !== 'host';
};

Call.isReflexive = function (candidate) {
    return candidate.type === 'srflx';
};

Call.isHost = function (candidate) {
    return candidate.type === 'host';
};

Call.isIpv6 = function (candidate) {
    return candidate.address.indexOf(':') !== -1;
};

Call.parseCandidate = function (text) {
    var candidateStr = 'candidate:';
    var pos = text.indexOf(candidateStr) + candidateStr.length;
    var fields = text.substr(pos).split(' ');
    return {
        'type': fields[7],
        'protocol': fields[2],
        'address': fields[4]
    };
};

Call.cachedIceServers_ = null;
Call.cachedIceConfigFetchTime_ = null;

Call.asyncCreateTurnConfig = function (onSuccess, onError) {
    var settings = currentTest.settings;
    if (typeof settings.turnURI === 'string' && settings.turnURI !== '') {
        var iceServer = {
            'username': settings.turnUsername || '',
            'credential': settings.turnCredential || '',
            'urls': settings.turnURI.split(',')
        };
        var config = { 'iceServers': [iceServer] };
        report.traceEventInstant('turn-config', config);
        setTimeout(onSuccess.bind(null, config), 0);
    } else {
        Call.fetchTurnConfig_(function (response) {
            var config = { 'iceServers': response.iceServers };
            report.traceEventInstant('turn-config', config);
            onSuccess(config);
        }, onError);
    }
};

Call.asyncCreateStunConfig = function (onSuccess, onError) {
    var settings = currentTest.settings;
    if (typeof settings.stunURI === 'string' && settings.stunURI !== '') {
        var iceServer = {
            'urls': settings.stunURI.split(',')
        };
        var config = { 'iceServers': [iceServer] };
        report.traceEventInstant('stun-config', config);
        setTimeout(onSuccess.bind(null, config), 0);
    } else {
        Call.fetchTurnConfig_(function (response) {
            var config = { 'iceServers': response.iceServers.urls };
            report.traceEventInstant('stun-config', config);
            onSuccess(config);
        }, onError);
    }
};

Call.fetchTurnConfig_ = function (onSuccess, onError) {

    var testRunTime = 240; // Time in seconds to allow a test run to complete.
    if (Call.cachedIceServers_) {
        var isCachedIceConfigExpired = (Date.now() - Call.cachedIceConfigFetchTime_) / 1000 > parseInt(Call.cachedIceServers_.lifetimeDuration) - testRunTime;
        if (!isCachedIceConfigExpired) {
            report.traceEventInstant('fetch-ice-config', 'Using cached credentials.');
            onSuccess(Call.getCachedIceCredentials_());
            return;
        }
    }

    var xhr = new XMLHttpRequest();
    function onResult() {
        if (xhr.readyState !== 4) {
            return;
        }

        if (xhr.status !== 200) {
            onError('TURN request failed');
            return;
        }

        var response = JSON.parse(xhr.responseText);
        Call.cachedIceServers_ = response;
        Call.getCachedIceCredentials_ = function () {
            return JSON.parse((0, _stringify2.default)(Call.cachedIceServers_));
        };
        Call.cachedIceConfigFetchTime_ = Date.now();
        report.traceEventInstant('fetch-ice-config', 'Fetching new credentials.');
        onSuccess(Call.getCachedIceCredentials_());
    }

    xhr.onreadystatechange = onResult;
    xhr.open('POST', TURN_URL + API_KEY, true);
    xhr.send();
};

function ConnectionTest(test, stun) {
    this.test = test;
    stun = stun || $("#stunserver").val();
    if (!stun) {
        stun = "stun:webrtc.qq.com:8800";
    }
    this.stun = {
        iceServers: [{
            urls: stun
        }],
        bundlePolicy: "max-bundle",
        rtcpMuxPolicy: "require",
        tcpCandidatePolicy: "disable",
        IceTransportsType: "nohost"
    };

    this.optional = {
        optional: [{
            DtlsSrtpKeyAgreement: true
        }]
    };
}

ConnectionTest.prototype = {
    run: function run() {
        this.createPeerConnection();
    },
    createPeerConnection: function createPeerConnection() {
        console.debug('createPeerConnection', this.stun, this.optional);
        var peerConnection = new RTCPeerConnection(this.stun, this.optional);
        peerConnection.onicecandidate = onicecandidate_;
        var offerSdpOption = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true,
            voiceActivityDetection: false
        };
        peerConnection.createOffer(offerSdpOption).then(function (offer) {
            console.debug('createOffer', offer);
            peerConnection.setLocalDescription(offer);
        });
        var that = this;
        function onicecandidate_(e) {
            var candidate = e.candidate;
            if (filterIceCandidate_(candidate)) {
                that.test.reportSuccess(candidate.candidate);
                that.test.done();
                peerConnection.close();
            } else {
                that.test.reportInfo(candidate.candidate);
            }
        }
        function getIceCandidateType_(candidate) {
            try {
                var str = candidate.candidate;
                var params = str.split(" ");
                return params[7];
            } catch (e) {
                console.error("Get Ice Candidate Type Error : e = " + e);
                return null;
            }
        }

        function filterIceCandidate_(candidate) {
            var str = candidate.candidate;
            if (str.indexOf("tcp") != -1) {
                return false;
            }
            return true;
        }
    }

};

function WebRTCTest() {
    this.listener = {
        onMessage: null,
        done: null
    };
    this.errorCount = 0;
    this.warnCount = 0;
    this.successCount = 0;
}
WebRTCTest.prototype = {
    reportWarning: function reportWarning(str) {
        console.error("warning : " + str);
        this.warnCount++;
        if (this.listener.onMessage) {
            this.listener.onMessage(str);
        }
    },
    reportError: function reportError(str) {
        console.error("error : " + str);
        this.errorCount++;
        if (this.listener.onMessage) {
            this.listener.onMessage(str);
        }
    },
    reportInfo: function reportInfo(str) {
        console.error("info : " + str);
        if (this.listener.onMessage) {
            this.listener.onMessage(str);
        }
    },
    reportFatal: function reportFatal(str) {
        console.error("fatal : " + str);
        this.reportError(str);
        this.done();
    },
    reportSuccess: function reportSuccess(str) {
        console.error("success : " + str);
        this.successCount++;
        if (this.listener.onMessage) {
            this.listener.onMessage(str);
        }
    },
    done: function done() {
        console.error("done !!! ");
        var result = 0;
        if (this.errorCount + this.warnCount > 0 || this.successCount <= 0) {
            console.error("this webrtc test failed!!!");
            result = -1;
        }
        if (this.listener.done) {
            this.listener.done(result);
        }
    },
    setListener: function setListener(listener) {
        this.listener.onMessage = listener.onMessage;
        this.listener.done = listener.done;
    }
};

var report = new Report();

exports.WebRTCTest = WebRTCTest;
exports.MicTest = MicTest;
exports.CameraTest = CameraTest;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(43);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(62);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(44), __esModule: true };

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(45);
__webpack_require__(58);
module.exports = __webpack_require__(23).f('iterator');


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(46)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(27)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(13);
var defined = __webpack_require__(14);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(48);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(32);
var descriptor = __webpack_require__(11);
var setToStringTag = __webpack_require__(22);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(2)(IteratorPrototype, __webpack_require__(6)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(3);
var anObject = __webpack_require__(9);
var getKeys = __webpack_require__(18);

module.exports = __webpack_require__(4) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(34);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(5);
var toLength = __webpack_require__(53);
var toAbsoluteIndex = __webpack_require__(54);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(13);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(13);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(0).document;
module.exports = document && document.documentElement;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(1);
var toObject = __webpack_require__(57);
var IE_PROTO = __webpack_require__(19)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(14);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(59);
var global = __webpack_require__(0);
var hide = __webpack_require__(2);
var Iterators = __webpack_require__(17);
var TO_STRING_TAG = __webpack_require__(6)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(60);
var step = __webpack_require__(61);
var Iterators = __webpack_require__(17);
var toIObject = __webpack_require__(5);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(27)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(63), __esModule: true };

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(64);
__webpack_require__(70);
__webpack_require__(71);
__webpack_require__(72);
module.exports = __webpack_require__(8).Symbol;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(0);
var has = __webpack_require__(1);
var DESCRIPTORS = __webpack_require__(4);
var $export = __webpack_require__(28);
var redefine = __webpack_require__(31);
var META = __webpack_require__(65).KEY;
var $fails = __webpack_require__(10);
var shared = __webpack_require__(20);
var setToStringTag = __webpack_require__(22);
var uid = __webpack_require__(12);
var wks = __webpack_require__(6);
var wksExt = __webpack_require__(23);
var wksDefine = __webpack_require__(24);
var enumKeys = __webpack_require__(66);
var isArray = __webpack_require__(67);
var anObject = __webpack_require__(9);
var isObject = __webpack_require__(7);
var toIObject = __webpack_require__(5);
var toPrimitive = __webpack_require__(16);
var createDesc = __webpack_require__(11);
var _create = __webpack_require__(32);
var gOPNExt = __webpack_require__(68);
var $GOPD = __webpack_require__(69);
var $DP = __webpack_require__(3);
var $keys = __webpack_require__(18);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(36).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(25).f = $propertyIsEnumerable;
  __webpack_require__(35).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(15)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(2)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(12)('meta');
var isObject = __webpack_require__(7);
var has = __webpack_require__(1);
var setDesc = __webpack_require__(3).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(10)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(18);
var gOPS = __webpack_require__(35);
var pIE = __webpack_require__(25);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(34);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(5);
var gOPN = __webpack_require__(36).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(25);
var createDesc = __webpack_require__(11);
var toIObject = __webpack_require__(5);
var toPrimitive = __webpack_require__(16);
var has = __webpack_require__(1);
var IE8_DOM_DEFINE = __webpack_require__(29);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(4) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 70 */
/***/ (function(module, exports) {



/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24)('asyncIterator');


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24)('observable');


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(74), __esModule: true };

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(8);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div")
}
var staticRenderFns = []
render._withStripped = true
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ __webpack_exports__["a"] = (esExports);
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-bced26ea", esExports)
  }
}

/***/ })
/******/ ]);
});
//# sourceMappingURL=webRTCTest_xhxx.min.js.map